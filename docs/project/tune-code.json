{"id":"tune-code","name":"TuneCode: Musical Programming Language","rating":4.5,"category":["Music Software"],"description":"TuneCode is a web-based programming language tailored for music creation, designed for users familiar with Digital Audio Workstations (DAWs). By using familiar DAW-like concepts, TuneCode enables users to create and manipulate music directly through code. It allows the playback of melodies using basic oscillators, the scheduling of audio samples, and the application of effects to craft rich soundscapes. TuneCode bridges the gap between music production and coding, offering a new, flexible way to explore musical creativity.","smImage":"/assets/project/tune-code.png","url":"https://saacostam.github.io/music-dsl","iframe":{"isResponsive":false},"repoUrl":"https://github.com/saacostam/music-dsl","content":[{"type":"header","text":"Motivation"},{"type":"text","text":"The motivation behind TuneCode was to merge two passions: coding and music production. The project aimed to offer a creative and technical platform that blends the two fields, allowing users to code their music through a familiar yet flexible interface."},{"type":"header","text":"Key Features"},{"type":"ul","listElements":["Error Handling: Syntactical and semantic errors are displayed in the console, helping users write correct code.","Oscillators: Users can generate and play melodies using basic oscillators, such as sine, square, and triangle waves.","Audio Sample Scheduling: TuneCode allows for the scheduling and playback of audio samples.","Effects: Effects such as gain, reverb, and delay can be applied to audio sources, enriching the sound.","Mixing & Scheduling: Multiple audio sources can be played in parallel using a scheduling mechanism that enables intricate compositions."]},{"type":"header","text":"Delelopment Process Overview"},{"type":"ol","listElements":["Initial Proof of Concepts (POCs) were created to test oscillators, audio samples, and audio scheduling.","Language primitives were defined to mirror common DAW elements and workflows, such as tabs, audio sources, and effect chains.","The parser was built using ANTLR, and an iterative process refined it to correctly build the audio graph.","The original scheduler used setTimeout for audio execution but was refactored to utilize the Web Audio API for more precise scheduling.","The embedded Monaco editor was integrated for a better code editing experience.","Additional features like a frequency spectrum visualizer and a library of pre-loaded audio samples were introduced.","End-to-end testing was employed to iteratively polish various components, including the scheduler and user interface.","Documentation was created to explain the DSL primitives and guide users in composing with TuneCode."]},{"type":"header","text":"Challanges"},{"type":"ul","listElements":["Building a domain-specific language (DSL) involved creating tokenizers, syntactic trees, and executing those trees. Though part of a class project, this was an intricate process requiring attention to detail.","Loading and preloading audio files asynchronously in the browser was a novel concept that required careful handling."]},{"type":"header","text":"Reflections and Learnings"},{"type":"text","text":"Working on TuneCode introduced many new topics, such as tokenizers, syntactic trees, tree traversal, the Web Audio API, and Canvas API, along with integrations using Vue and external modules. This project presented unusual challenges, unlike typical web development, and demonstrated the power and flexibility of DSLs in solving complex and creative tasks. It also highlighted the importance of precision in audio scheduling and how different libraries can simplify or enhance development workflows."},{"type":"header","text":"Future Improvements"},{"type":"ul","listElements":["User Uploads: Enable users to upload their own audio files for further customization.","Editor Enhancements: Integrate syntax highlighting and auto-completion in the Monaco editor, leveraging ANTLRâ€™s capabilities.","Documentation Translation: Translate all documentation into English to reach a wider audience."]}],"similarProjects":[{"id":"chord-visualizer","name":"Chord Visualizer","rating":4.5,"description":"Chord Visualizer is a web app designed to help musicians and music enthusiasts learn chords through an interactive and engaging experience. The app features a real-time chord visualizer that syncs seamlessly with audio sources like YouTube videos, providing a dynamic way to follow along with music. Users can see chords displayed as they play, enhancing their learning experience by combining visual cues with auditory input. Whether you're practicing a song or learning new chords, Chord Visualizer makes the process intuitive and fun.","category":["Music Software"],"smImage":"/assets/project/chord-visualizer.png"},{"id":"3d-music-visualizer","name":"3D Music Visualizer","rating":4,"description":"3D Music Visualizer is a web application that generates attractive 3D visualizations of audio files, using the AnalyserNode from the JavaScript Audio API combined with p5.js and WEBGL for rendering. Users can upload their own audio tracks, customize various visual parameters, and select from different visualization modes to create a personalized experience. This project provides an engaging and dynamic way to explore the connection between sound and visuals.","category":["Music Software"],"smImage":"/assets/project/3d-music-visualizer.png"},{"id":"piano-roll","name":"Piano Roll","rating":3.6,"description":"Piano Roll is a functional web-based tool for music prototyping, designed to resemble the piano rolls found in music production software (DAWs). It allows users to visually compose and edit melodies by placing notes on a grid, providing an intuitive interface for creating music in a browser environment. This tool is ideal for quick music sketching and experimentation.","category":["Music Software"],"smImage":"/assets/project/piano-roll.png"}]}
{"id":"lalu","name":"Lalu: Spotify Clone - FE App","rating":4.2,"category":["Music Software","Software Engineering"],"description":"Lalu is a frontend application inspired by Spotify, designed to allow users to stream music, explore artist profiles, and enjoy curated playlists. Originally developed as a class project, the app was built to interface with a complex backend powered by distributed microservices using various programming languages and components. In its current state, the frontend relies on mock data to simulate the original functionality, providing an engaging music streaming experience without the need for a full backend infrastructure.","smImage":"/assets/project/lalu.png","url":"https://saacostam.github.io/lalu/","iframe":{"isResponsive":true},"repoUrl":"https://github.com/saacostam/lalu","content":[{"type":"header","text":"Motivation"},{"type":"text","text":"The motivation behind Lalu was to create a frontend application inspired by Spotify, designed to allow users to stream music, explore artist profiles, and enjoy curated playlists."},{"type":"header","text":"Key Features"},{"type":"ul","listElements":["Audio Playback: Includes basic playback functionality for songs and playlists.","Explore Artists: Access the profiles of various artists and their popular songs.","Spotify-like UI: Familiar and intuitive interface that mirrors the experience of using Spotify, making navigation and exploration easy for users."]},{"type":"header","text":"Development Process Overview"},{"type":"ol","listElements":["Initial Microservices Architecture: The project began as part of a class project using a sprint-based development cycle. Each team member was responsible for creating microservices in different languages, handling various entities. These services were integrated through an API gateway, consumed by both a mobile and a web app.","Layout and Global State Management: The first task focused on creating a complex layout where static components, such as the audio player and navigation, remained persistent across pages while dynamic content, such as artist profiles, followed a router-based behavior.","Data Integration: Once the layout was established, the next step was integrating data from the API gateway for artists, playlists, and songs, ensuring proper display on the frontend.","Audio Playback Handling: I explored various approaches for handling audio playback. While considering the Web Audio API, I opted for the native HTML audio element for simplicity and reliability.","Refactor and Mock Data: After the backend infrastructure was removed, I replaced the server data with mock data and refactored the codebase, breaking it down into more reusable components while ensuring the app maintained its core functionality.","Responsive Design Implementation: The final step involved refining the app to be responsive across different devices."]},{"type":"header","text":"Challanges"},{"type":"ul","listElements":["Managing Audio Files and Playback: Understanding how to effectively manage audio files and integrate them into playlists was a significant challenge. By experimenting with both the Web Audio API and the native HTML audio element, I was able to achieve a stable playback functionality.","Complex Layout Implementation: This project required creating an unusual layout where certain elements, such as the player and navigation, persist across pages while the main content dynamically changes. This helped me gain a deeper understanding of state management and CSS techniques to build more complex layouts."]},{"type":"header","text":"Learnings"},{"type":"ul","listElements":["Responsive Design: While the application is responsive, I realized that adopting a mobile-first design approach from the beginning might have simplified the development process. The current layout, though functional, could be further optimized for a better user experience.","Audio Element: This project gave me a solid grasp of the HTML audio element, helping me understand its capabilities and limitations compared to more complex solutions like the Web Audio API."]},{"type":"header","text":"Future Improvements"},{"type":"ul","listElements":["Responsive Layout Revamp: A revisit of the responsive design might be necessary to improve it offering a more intuitive and comfortable experience across devices.","Enhanced Playback Features: Future updates may include additional playback modes such as shuffle, loop, and more advanced audio controls to mimic a full-fledged music streaming application."]}],"similarProjects":[{"id":"tune-code","name":"TuneCode: Musical Programming Language","rating":4.5,"description":"TuneCode is a web-based programming language tailored for music creation, designed for users familiar with Digital Audio Workstations (DAWs). By using familiar DAW-like concepts, TuneCode enables users to create and manipulate music directly through code. It allows the playback of melodies using basic oscillators, the scheduling of audio samples, and the application of effects to craft rich soundscapes. TuneCode bridges the gap between music production and coding, offering a new, flexible way to explore musical creativity.","category":["Music Software"],"smImage":"/assets/project/tune-code.png"},{"id":"chord-visualizer","name":"Chord Visualizer","rating":4.5,"description":"Chord Visualizer is a web app designed to help musicians and music enthusiasts learn chords through an interactive and engaging experience. The app features a real-time chord visualizer that syncs seamlessly with audio sources like YouTube videos, providing a dynamic way to follow along with music. Users can see chords displayed as they play, enhancing their learning experience by combining visual cues with auditory input. Whether you're practicing a song or learning new chords, Chord Visualizer makes the process intuitive and fun.","category":["Music Software"],"smImage":"/assets/project/chord-visualizer.png"},{"id":"3d-music-visualizer","name":"3D Music Visualizer","rating":4,"description":"3D Music Visualizer is a web application that generates attractive 3D visualizations of audio files, using the AnalyserNode from the JavaScript Audio API combined with p5.js and WEBGL for rendering. Users can upload their own audio tracks, customize various visual parameters, and select from different visualization modes to create a personalized experience. This project provides an engaging and dynamic way to explore the connection between sound and visuals.","category":["Music Software"],"smImage":"/assets/project/3d-music-visualizer.png"}]}
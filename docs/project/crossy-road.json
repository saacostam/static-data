{"id":"crossy-road","name":"Crossy Road - Game Clone","rating":4.1,"category":["Games"],"description":"This is a 3D recreation of the popular game Crossy Road, developed using BabylonJs as the game engine. The project's architecture and class structure closely follow the ExcaliburJs framework, while leveraging BabylonJs's 3D primitives to bring the game world to life. This project showcases the implementation of core gameplay mechanics in a 3D environment, providing a modern twist on a familiar classic.","smImage":"/assets/project/crossy-road.png","url":"https://saacostam.github.io/3d-crossy-road/","iframe":{"isResponsive":false,"canBeUsedInMobile":false,"width":1000,"height":500},"repoUrl":"https://github.com/saacostam/3d-crossy-road/","content":[{"type":"header","text":"Challenges and Solutions"},{"type":"text","text":"During development, one of the biggest challenges was implementing the standard \"input-update-draw\" loop using BabylonJs, which required a steep learning curve. Although the framework itself was not inherently difficult, it needed to be learned from the ground up. Additionally, handling 3D models presented its own set of obstacles. Instead of relying on pre-built 3D models, I opted to use simpler shapes like cubes, cylinders, and spheres. These basic shapes were combined and manipulated directly within the game logic to form more complex structures, streamlining development given the project's modest visual requirements"},{"type":"header","text":"Key Features"},{"type":"ul","listElements":["Recreation of core Crossy Road gameplay from scratch.","Optimizations for game performance, such as pooling and cleanup of unused or off-screen elements.","Use of basic shapes to form complex structures, ensuring efficient development and minimizing dependencies on 3D modeling software.","Collision detection and movement in 3D space using BabylonJs's mesh collisions.","Game state management achieved through the use of state machines."]},{"type":"header","text":"Delelopment Process Overview"},{"type":"text","text":"The development process was driven more by curiosity and fun than by a formal methodology. Features were built as they came to mind, making this project a significant learning experience. The architecture was kept lean, with a focus on implementing a game loop similar to that of ExcaliburJs but adapted for 3D."},{"type":"header","text":"Reflections and Learnings"},{"type":"text","text":"This project provided valuable experience working with BabylonJs. Although I didn't utilize all of the engine's features, I became comfortable with its basic workflow and primitives. I also gained a deeper understanding of handling movement and collisions in 3D space. The implementation of state machines for game state management was particularly rewarding, as it allowed for better organization of the game's various states."},{"type":"text","text":"Additionally, I encountered challenges when attempting to integrate external 3D models into the project. The models were not normalized, resulting in significant size discrepancies, and I realized that external tools like Blender were necessary to fix these issues. This was a new learning experience and something I plan to explore further."},{"type":"header","text":"Future Improvements and Next Steps"},{"type":"text","text":"Moving forward, I would like to revisit the integration of 3D models, learning to adjust and normalize them properly within the scene. Additionally, I realized that while BabylonJs is a powerful engine, the resulting architecture of my project might be better suited to a more lightweight framework such as ThreeJs. The slimmer codebase and simpler game loop suggest that using ThreeJs could lead to a more streamlined and efficient development process."}],"similarProjects":[{"id":"3d-tower-defense","name":"3D Tower Defense","rating":4.2,"description":"üõ°Ô∏è A strategy game where players defend against waves of enemies by strategically placing towers on a 3D map. ","category":["Games"]},{"id":"bio-rastro","name":"BioRastro - Game","rating":4,"description":"BioRastro is a Pok√©mon-inspired game where players explore the Chingaza p√°ramo, discovering its unique fauna. The game's goal is to educate players about the rich biodiversity of this Colombian ecosystem and Colombia üá®üá¥ as a whole. Built using Excalibur.js, BioRastro combines adventure and learning, offering an engaging way to raise awareness about environmental conservation.","category":["Games"],"smImage":"/assets/project/bio-rastro.png"},{"id":"slippery-slope","name":"Slippery Slope","rating":3.5,"description":"Slippery Slope is a platform game developed using the HTML Canvas element. The game's unique challenge comes from its slippery mechanics, a result of experimenting with friction physics during development. Players navigate through various levels, dealing with the game's intentionally slippery surfaces, which add a distinctive twist to the platforming experience.","category":["Games"],"smImage":"/assets/project/slippery-slope.png"}]}